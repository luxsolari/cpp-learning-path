; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32215.0 

	TITLE	D:\data\code\gaming-studio-practices\ThreadsMulti\bin\Win32\Debug\intermediates\InvFastSqrt.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__6857C8E5_ThreadsMulti@pch DB 01H
__40489182_InvFastSqrt@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?Q_rsqrt@@YAMM@Z				; Q_rsqrt
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3f000000
PUBLIC	__real@3fc00000
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	0a2H
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\data\code\gaming-studio-practices\ThreadsMulti\src\InvFastSqrt.cpp
;	COMDAT ?Q_rsqrt@@YAMM@Z
_TEXT	SEGMENT
_threehalfs$ = -48					; size = 4
_y$ = -36						; size = 4
_x2$ = -24						; size = 4
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_number$ = 8						; size = 4
?Q_rsqrt@@YAMM@Z PROC					; Q_rsqrt, COMDAT

; 3    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __40489182_InvFastSqrt@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 4    : 	long i;
; 5    : 	float x2, y;
; 6    : 	const float threehalfs = 1.5F;

	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR _threehalfs$[ebp], xmm0

; 7    : 
; 8    : 	x2 = number * 0.5F;

	movss	xmm0, DWORD PTR _number$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _x2$[ebp], xmm0

; 9    : 	y  = number;

	movss	xmm0, DWORD PTR _number$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 10   : 	i  = * ( long * ) &y;                       // evil floating point bit level hacking

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _i$[ebp], eax

; 11   : 	i  = 0x5f3759df - ( i >> 1 );               // what the fuck? 

	mov	eax, DWORD PTR _i$[ebp]
	sar	eax, 1
	mov	ecx, 1597463007				; 5f3759dfH
	sub	ecx, eax
	mov	DWORD PTR _i$[ebp], ecx

; 12   : 	y  = * ( float * ) &i;

	movss	xmm0, DWORD PTR _i$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 13   : 	y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration 

	movss	xmm0, DWORD PTR _x2$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR __real@3fc00000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y$[ebp], xmm1

; 14   : 	//y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed
; 15   : 
; 16   : 	return y;

	fld	DWORD PTR _y$[ebp]

; 17   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Q_rsqrt@@YAMM@Z ENDP					; Q_rsqrt
_TEXT	ENDS
END
