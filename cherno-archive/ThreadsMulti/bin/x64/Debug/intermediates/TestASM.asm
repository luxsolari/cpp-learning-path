; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32215.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__86DF171F_TestASM@cpp DB 01H
msvcjmc	ENDS
PUBLIC	main
PUBLIC	__JustMyCode_Default
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN6
	DD	imagerel $LN6+104
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025050f01H
	DD	010a230fH
	DD	070030029H
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\data\code\gaming-studio-practices\ThreadsMulti\src\TestASM.cpp
;	COMDAT main
_TEXT	SEGMENT
x$ = 4
y$ = 36
i$1 = 68
main	PROC						; COMDAT

; 3    : {

$LN6:
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__86DF171F_TestASM@cpp
	call	__CheckForDebuggerJustMyCode

; 4    : 	int x {0}, y {0};	// x and y are initialized to 0. this are braced initialization. 

	mov	DWORD PTR x$[rbp], 0
	mov	DWORD PTR y$[rbp], 0

; 5    : 						// this kind of initialization is more efficient than the other kind of initialization.
; 6    : 						// it was introduced in C++11.
; 7    : 
; 8    : 	for (int i{0}; i < 100; i++)	// this is a for loop with braced initialization

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@main:
	cmp	DWORD PTR i$1[rbp], 100			; 00000064H
	jge	SHORT $LN3@main

; 9    : 	{
; 10   : 		x += i;

	mov	eax, DWORD PTR i$1[rbp]
	mov	ecx, DWORD PTR x$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rbp], eax

; 11   : 		y += i;

	mov	eax, DWORD PTR i$1[rbp]
	mov	ecx, DWORD PTR y$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$[rbp], eax

; 12   : 	}

	jmp	SHORT $LN2@main
$LN3@main:

; 13   : 
; 14   : 	
; 15   : }

	xor	eax, eax
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
END
